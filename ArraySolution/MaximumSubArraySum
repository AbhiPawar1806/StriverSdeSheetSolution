package Array;
import java.util.ArrayList;
public class MaximumSubArraySum {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
         int arr[]= {-2,1,-3,4,-1,2,1,-5,4};
         ArrayList<Integer> subArray = new ArrayList<>();
         // Brute Force approach by using 2 loops forming all sub array and updating max value also adding values in array list if need TC O(N2)
//         int maxSum = Integer.MIN_VALUE;
//         for(int i = 0;i< arr.length ;i++) {
//        	 int curSum = 0;
//        	 for(int j = i ;j < arr.length ;j++) {
//        		 
//        		 // To print all subArray we required one more loop of k having rang from i to j
////        		 for(int k = i ; k <= j ;k++) {
////        			 System.out.print(arr[k] + " ");
////        		 }
//        		 curSum = curSum + arr[j];
//        		 if(curSum > maxSum) {
//        		 maxSum =curSum;
//        		 // Adding that index in list so we can get that subarray to print
//        		 subArray.clear();
//        		 subArray.add(i);
//        		 subArray.add(j);
//        		 }
////        		 System.out.println();
//        	 }
//         }
//         System.out.println(maxSum);
//         // Printing that subarray based on index position 
//         for(int i = subArray.get(0) ; i <= subArray.get(1);i++) {
//        	 System.out.print(arr[i] + " ");
//         }
         
         // KADANESS ALGO TC O (N) 
         int maxSum = Integer.MIN_VALUE;
         int curSum = 0;
         int startIndex = 0;
         for(int i = 0;i< arr.length;i++) {
        	 curSum = curSum + arr[i];
        	 if(curSum > maxSum) {
        		 maxSum = curSum ;
        		 // puting index position in list as we want that list also
        		 subArray.clear();
        		 subArray.add(startIndex);
        		 subArray.add(i);
        	 }
        	 // If the sum is less than zero than it will not contribute for max value so we should start again firm next element of that element where sum became negative
             if(curSum < 0) {
            	 curSum = 0;
            	 startIndex = i + 1;
             }
         }
         System.out.println(maxSum);
         // Printing that subarray
         for(int i = subArray.get(0) ; i <= subArray.get(1);i++) {
        	 System.out.print(arr[i] + " ");
        }
	}

}
